一、tableOther
    1.  height: 500,Table 的高度，默认为自动高度。
        maxHeight: 700,Table 的最大高度。合法的值为数字或者单位为 px 的高度。
        stripe: false,是否为斑马纹 table
        border: false,是否带有纵向边框
        size: "medium",Table 的尺寸
        fit: true,列的宽度是否自撑开
        show-header: true,是否显示表头
        highlight-current-row: false,
        current-row-key: 0,当前行的 key，只写属性

        **row-class-name:"",行的 className 的回调方法，也可以使用字符串为所有行设置一个固定的 className。
        为 Table 中的某一行添加 class，表明该行处于某种状态。


<!-- 基础表格:
    el-table-column: prop:String,对应tabledata中的数据;label:String,列名;width:String,列宽 
    -->
    <!-- 带斑马纹表格:
      el-table：stripe:Boolean false;
    -->
    <!-- 带边框表格:
      el-table：border:Boolean true;
    -->
    <!-- 带状态表格:
      el-table：
        row-class-name:来为 Table 中的某一行添加 class，表明该行处于某种状态。
                     Fun==  tableRowClassName({row, rowIndex}) {};  
     -->
    <!-- 固定列和表头:
      el-table:
        height:String即可实现固定表头的表格，而不需要额外的代码。
      el-table-column：
        fixed：Boolean true ||left right
     -->
    <!-- 流体高度：
      el-table：
        max-height：属性为 Table 指定最大高度。此时若表格所需的高度大于最大高度，则会显示一个滚动条。
    -->
    <!-- 多级表头：
     只需要在 el-table-column 里面嵌套 el-table-column，就可以实现多级表头。
     -->
    <!--单选：el-table
      1.配置highlight-current-row属性；
      2.current-change事件来管理选中时触发的事件，它会传入currentRow，oldCurrentRow；
      3.需要显示索引，可以增加一列el-table-column，设置type属性为index即可显示从 1 开始的索引号。
      4.取消或者设置选中状态：this.$refs.table.setCurrentRow(row);
      -->
    <!-- 多选：
      1.el-table-column： type="selection";
      2.el-table-column：show-overflow-tooltip:Booleanf false  当内容过长被隐藏时显示 tooltip;
      3.el-table-column: tooltip-effect="dark || light":tooltip的风格;
      4.el-table:@selection-change: Fun==handleSelectionChange(val) {this.multipleSelection = val;};
      5.js控制显示和清楚选中的状态：
         this.$refs.table.toggleRowSelection(table[1]);
         this.$refs.table.clearSelection();
     -->
    <!-- 排序:
          1.默认排序
             el-table:default-sort = "{prop: 'date', order: 'descending'}";
             el-table-column:sortable:Boolean false 可实现以该列为基准的排序;
          2.自定义排序
          el-table-column:sortable="true"
                        :sort-method="sortMethod"  //只需写方法名，不能把添加参数括号的写法如：sortMethod(a,b)
                         :sort-method="(a,b) => sortMethod(a ,b , 'date')"
            sortMethod(obj1, obj2,column) {
               　var at = obj1[column]
　　             var bt = obj2[column]
　　              if (at > bt) {
                  　　return -1
　　              } else {
                  　　return 1
　　              }
            }
          注意： 返回必须是-1 ，1
          3.支持远程排序
              el-table-column:sortable='custom':支持远程排序
              el-table:@sort-change="sortChange";
               sortChange(column, key, order) {
                  console.log(column, key, order)
                ...此处调用后台接口
               }
          4.el-table-column：formatter：属性，用于格式化指定列的值，接受一个Function，会传入两个参数：row和column，可以根据自己的需求进行处理。
              formatter(row, column) {
                return row.address;
              }
      -->
    <!-- 筛选:
        el-table-column：
          :filters="[{text: '2016-05-01', value: '2016-05-01'}, {text: '2016-05-04', value: '2016-05-04'}]"
          :filter-method="filterHandler"：是一个方法，它用于决定某些数据是否显示，会传入三个参数：value, row 和 column。
                 filterHandler(value, row, column) {
                  const property = column['property'];
                  return row[property] === value;
                }
          1.清除日期过滤器:this.$refs.table.clearFilter('date');
          2.清除所有过滤器:this.$refs.table.clearFilter();
    -->
    <!-- 自定义列模板:
        <el-table-column label="操作">
          <template slot-scope="scope">
          </template>
        </el-table-column>
          @click="handleEdit(scope.$index, scope.row)"
    -->
    <!-- 展开行:
        el-table-column:type="expand"
      -->
    <!--  树形数据与懒加载:
             渲染树形数据
                1.el-table:row-key="id"； default-expand-all；:tree-props="{children: 'children', hasChildren: 'hasChildren'}"
             懒加载
                1.el-table:row-key="id"  lazy  :load="load" :tree-props="{children: 'children', hasChildren: 'hasChildren'}"
                2.load(tree, treeNode, resolve) {
                    setTimeout(() => {
                      resolve([
                        {
                          id: 31,
                          date: '2016-05-01',
                          name: '王小虎',
                          address: '上海市普陀区金沙江路 1519 弄'
                        }, {
                          id: 32,
                          date: '2016-05-01',
                          name: '王小虎',
                          address: '上海市普陀区金沙江路 1519 弄'
                        }
                      ])
                    }, 1000)
     -->
    <!-- 自定义表头:
           <el-table-column
      align="right">
      <template slot="header" slot-scope="scope">
        <el-input
          v-model="search"
          size="mini"
          placeholder="输入关键字搜索"/>
      </template>
      <template slot-scope="scope">
        <el-button
          size="mini"
          @click="handleEdit(scope.$index, scope.row)">Edit</el-button>
        <el-button
          size="mini"
          type="danger"
          @click="handleDelete(scope.$index, scope.row)">Delete</el-button>
      </template>
    </el-table-column>
   -->
 <!-- 自定义索引：
      el-table-column: type="index":index="indexMethod"
      indexMethod(index) {
        return index * 2;
      }
  -->





  tooltip-effect="dark"
    empty-text=""
    expand-row-keys="[]"
    default-sort
    show-summary
    sum-text=""
    select-on-indeterminate
    row-class-name
    :current-row-key="headerFun"
    :row-style="rowStyleFun"
    :cell-class-name="cellStyleFun"
    :cell-style="cellStyleFun"
    :header-row-class-name="headerroeFun"
    :header-row-style="headerroeFun"
    :header-cell-class-name="headerroeFun"
    :header-cell-style="headerroeFun"
    :row-key="headerroeFun"
    :summary-method="headerroeFun"
    :span-method="headerroeFun"
    @select="select"
    @select-all="selectAll"
    @selection-change="handleSelectionChange"
    @cell-mouse-enter="cellMouseEnter"
    @cell-mouse-leave="cellMouseLeave"
    @cell-click="cellClick"
    @cell-dblclick="cellDblclick"
    @row-click="rowClick"
    @row-contextmenu="rowContextmenu"
    @row-dblclick="rowDblclick"
    @header-click="headerClick"
    @header-contextmenu="headerContextmenu"
    @sort-change="sortChange"
    @filter-change="filterChange"
    @current-change="currentChange"
    @header-dragend="headerDragend"
    @expand-change="expandChange"
    :clearSelection="clearSelection"
    :toggleRowSelection="toggleRowSelection"
    :toggleAllSelection="toggleAllSelection"
    :toggleRowExpansion="toggleRowExpansion"
    :setCurrentRow="setCurrentRow"
    :clearSort="clearSort"
    :clearFilter="clearFilter"
    :doLayout="doLayout"
    :sort="sort"